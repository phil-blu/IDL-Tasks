# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DX7qtv7lkfDKz9yRrU6DzQFcHMFhsJ72
"""

array = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]
def max_adj_sum(a_list):
  
  # Checking for empty array
  length = len(a_list)
  if length == 0:
    return 0
  
  import math
  max_sum = 0
  length = len(a_list)
  current = -math.inf
  sum = 0

  # looping through to get all subarrays
  for item in range(length):
    # for the first subarray
    if item == 0:   
      sub_list = a_list[item:item+2]
      #print(sub_list)
      
      for i in sub_list:
        sum+=i
      if current < sum:
          current = sum
          #print(sum)

    # for the last subarray
    elif item == length - 1:
      sub_list = a_list[item-1:item+1]
      #print(sub_list)
      
      for i in sub_list:
        sum+=i
        if current < sum:
          current = sum
      #print(sum)
    
    else:
      sub_list = a_list[item - 1: item + 2]
      #print(sub_list)
      sum = 0
      for i in sub_list:
        sum+=i
      if current < sum:
          current = sum
      #print(sum)

  return (current)

array = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4] 
max_adj_sum(array)

"""
Complexity Analysis:
O(nlogn) for time
O(1) for space
"""
